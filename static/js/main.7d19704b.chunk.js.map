{"version":3,"sources":["graphql/useEntries.js","graphql/entryMutations.js","RealmApp.js","graphql/application.js","components/Home.tsx","components/LoginScreen.js","components/ErrorHandler.js","graphql/RealmApolloProvider.js","components/PrivateRoute.js","components/AddEntry.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ENTRIES","gql","ADD_ENTRY","DELETE_ENTRY","RealmAppContext","React","createContext","useRealmApp","app","useContext","Error","RealmAppProvider","appId","children","useState","Realm","setApp","useEffect","currentUser","setCurrentUser","credentials","a","logIn","logOut","wrapped","forceLogout","accessToken","refreshToken","Provider","value","GET_APPLICATION","UPDATE_APPLICATION","library","add","faTrashAlt","faPencilAlt","classNames","require","entriesByDate","entries","recurringEntries","date","filteredByDate","filter","entry","dayjs","startOf","isSame","result","map","recurringDate","month","get","year","toISOString","sortEntriesByDate","concat","isAfter","sort","b","withRouter","props","initialBalance","setInitialBalance","numberOfMonths","setNumberOfMonths","setEntries","setRecurringEntries","generatedMonths","setGeneratedMonths","useMutation","deleteEntry","updateApplication","selectedEntry","setSelectedEntry","balanceInput","useRef","document","createElement","currentBalance","useLazyQuery","onCompleted","console","log","onError","error","fetch","loading","data","variables","query","_id","customData","application","balance","current","getApplication","months","i","push","className","htmlFor","ref","name","id","defaultValue","type","min","onChange","event","parseInt","target","onClick","e","preventDefault","then","response","length","Fragment","key","format","amount","title","icon","LoginScreen","mode","email","setEmail","password","setPassword","setError","setIsLoggingIn","handleLogin","emailPassword","handleAuthenticationError","to","aria-label","required","placeholder","fill","viewBox","fillRule","d","clipRule","err","parts","message","split","reason","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","ErrorStatusContext","ErrorHandler","history","useHistory","errorStatusCode","setErrorStatusCode","listen","undefined","createRealmApolloClient","link","HttpLink","uri","options","refreshCustomData","catch","headers","Authorization","cache","InMemoryCache","ApolloClient","RealmApolloProvider","client","setClient","PrivateRoute","Component","component","rest","render","pathname","state","from","location","addEntry","Date","is_recurring","user","entryData","setEntryData","handleInputChange","HTMLInputElement","checked","App","exact","path","Home","AddEntry","Boolean","window","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d19704b.chunk.js","sourcesContent":["import {gql} from '@apollo/client';\r\n\r\nexport const ENTRIES = gql`\r\n  fragment EntryData on Entry {\r\n    _id\r\n    title\r\n    type\r\n    amount\r\n    is_recurring\r\n    date\r\n  }\r\n  \r\n  query GetAllEntries {\r\n    entries (\r\n      query: { is_recurring: false }\r\n      sortBy: DATE_ASC\r\n    ) {...EntryData}\r\n    \r\n    recurringEntries: entries (\r\n      query: { is_recurring: true }\r\n    ) {...EntryData}\r\n  }\r\n`;","import {gql} from '@apollo/client';\r\n\r\nexport const ADD_ENTRY = gql`\r\n  mutation AddEntry($data: EntryInsertInput!) {\r\n    insertOneEntry(data: $data) {\r\n      _id\r\n      title\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_ENTRY = gql`\r\n  mutation DeleteEntry($query: EntryQueryInput!) {\r\n    deleteOneEntry(query: $query) {\r\n      _id\r\n      title\r\n    }\r\n  }\r\n`;","import React, {useContext} from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst RealmAppContext = React.createContext();\r\n\r\nexport const useRealmApp = () => {\r\n    const app = React.useContext(RealmAppContext);\r\n    if (!app) {\r\n        throw new Error(\r\n            `You must call useRealmApp() inside of a <RealmAppProvider />`\r\n        );\r\n    }\r\n    return app;\r\n};\r\n\r\nexport const RealmAppProvider = ({ appId, children }) => {\r\n    const [app, setApp] = React.useState(new Realm.App(appId));\r\n    React.useEffect(() => {\r\n        setApp(new Realm.App(appId));\r\n    }, [appId]);\r\n\r\n    // Wrap the Realm.App object's user state with React state\r\n    const [currentUser, setCurrentUser] = React.useState(app.currentUser);\r\n    async function logIn(credentials) {\r\n        await app.logIn(credentials);\r\n        // If successful, app.currentUser is the user that just logged in\r\n        setCurrentUser(app.currentUser);\r\n    }\r\n    async function logOut() {\r\n        // Log out the currently active user\r\n        await app.currentUser?.logOut();\r\n        // If another user was logged in too, they're now the current user.\r\n        // Otherwise, app.currentUser is null.\r\n        setCurrentUser(app.currentUser);\r\n    }\r\n\r\n    function forceLogout() {\r\n        if (currentUser) {\r\n            currentUser.accessToken = null;\r\n            currentUser.refreshToken = null;\r\n            setCurrentUser(null);\r\n        }\r\n    }\r\n\r\n    const wrapped = { ...app, currentUser, logIn, logOut, forceLogout };\r\n\r\n    return (\r\n        <RealmAppContext.Provider value={wrapped}>\r\n            {children}\r\n        </RealmAppContext.Provider>\r\n    );\r\n};\r\n","import {gql} from '@apollo/client';\r\n\r\nexport const GET_APPLICATION = gql`\r\n  query GetApplication($query: ApplicationQueryInput) {\r\n    application (\r\n      query: $query\r\n    ) {\r\n      balance\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_APPLICATION = gql`\r\n  mutation UpdateApplication($query: ApplicationQueryInput, $set: ApplicationUpdateInput!) {\r\n    updateOneApplication(query: $query, set: $set) {\r\n      _id\r\n      balance\r\n    }\r\n  }\r\n`;","import React, {useEffect, useState} from 'react'\r\n// import Entry from './Entry'\r\nimport {withRouter} from \"react-router\"\r\nimport {ENTRIES} from \"../graphql/useEntries\";\r\nimport {useLazyQuery, gql, useMutation} from '@apollo/client';\r\nimport dayjs from \"dayjs\";\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTrashAlt} from '@fortawesome/free-regular-svg-icons'\r\nimport {faPencilAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport {DELETE_ENTRY} from \"../graphql/entryMutations\";\r\nimport {useRealmApp} from \"../RealmApp\";\r\nimport {GET_APPLICATION, UPDATE_APPLICATION} from \"../graphql/application\";\r\n\r\nlibrary.add(faTrashAlt);\r\nlibrary.add(faPencilAlt);\r\n\r\nconst classNames = require('classnames');\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface iEntry {\r\n  _id: string,\r\n  date: string,\r\n  title: String,\r\n  type: String,\r\n  amount: number,\r\n  is_recurring: boolean,\r\n}\r\n\r\nconst Home = (props: Props) => {\r\n  const [initialBalance, setInitialBalance] = useState(10000);\r\n  const [numberOfMonths, setNumberOfMonths] = useState<number>(4);\r\n  const [entries, setEntries] = useState([]);\r\n  const [recurringEntries, setRecurringEntries] = useState([]);\r\n  const [generatedMonths, setGeneratedMonths] = useState<Array<dayjs.Dayjs>>([]);\r\n  const [deleteEntry] = useMutation(DELETE_ENTRY);\r\n  const [updateApplication] = useMutation(UPDATE_APPLICATION);\r\n  const [selectedEntry, setSelectedEntry] = useState('');\r\n  const app = useRealmApp();\r\n  const balanceInput = React.useRef(document.createElement(\"input\"))\r\n\r\n\r\n  let currentBalance = initialBalance;\r\n\r\n  const [fetch, {loading, error, data}] = useLazyQuery(ENTRIES, {\r\n    onCompleted: (result) => {\r\n      console.log('completed with data:', result);\r\n      setEntries(result.entries);\r\n      setRecurringEntries(result.recurringEntries);\r\n    },\r\n    onError: (error) => {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\n  const [getApplication] = useLazyQuery(GET_APPLICATION, {\r\n    variables: {\r\n      query: {\r\n        _id: app.currentUser.customData.application\r\n      }\r\n    },\r\n    onCompleted: (result) => {\r\n      setInitialBalance(result.application.balance);\r\n      balanceInput.current.value = result.application.balance;\r\n    },\r\n    onError: (error) => {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n    getApplication();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let months = [];\r\n    for (let i = 0; i < numberOfMonths; i++) {\r\n      months.push(dayjs().add(i, 'month').startOf('month'));\r\n    }\r\n    setGeneratedMonths(months);\r\n  }, [numberOfMonths]);\r\n\r\n  return (\r\n    <div\r\n      className=\"min-h-screen flex justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8 text-xs md:text-sm\">\r\n      <div className=\"max-w-2xl w-full\">\r\n        <div className=\"grid grid-cols-2 gap-3\">\r\n          <div className=\"col-span-1\">\r\n            <label htmlFor=\"balance\" className=\"block text-sm font-medium leading-5 text-gray-700\">\r\n              Initial balance\r\n            </label>\r\n            <input\r\n              ref={balanceInput}\r\n              name=\"balance\"\r\n              id=\"balance\"\r\n              defaultValue={initialBalance}\r\n              type=\"number\"\r\n              className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n            />\r\n          </div>\r\n          <div className=\"col-span-1\">\r\n            <label htmlFor=\"months\" className=\"block text-sm font-medium leading-5 text-gray-700\">\r\n              Number of months\r\n            </label>\r\n            <input\r\n              name=\"months\"\r\n              id=\"months\"\r\n              defaultValue={numberOfMonths}\r\n              min=\"1\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                setNumberOfMonths(parseInt(event.target.value) || numberOfMonths)\r\n              }}\r\n              className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n            />\r\n          </div>\r\n          <div className=\"col-span-2\">\r\n            <button\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setInitialBalance(parseInt(balanceInput.current.value))\r\n                updateApplication({\r\n                  variables: {\r\n                    'query': {'_id': app.currentUser.customData.application},\r\n                    'set': {\r\n                      'balance': balanceInput.current.value\r\n                    }\r\n                  }\r\n                }).then(response => {\r\n                  console.log(response);\r\n                });\r\n              }}\r\n              type=\"submit\"\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n            >\r\n              Set\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {generatedMonths.map((month) => {\r\n          if (entriesByDate(entries, recurringEntries, month).length <= 0) return '';\r\n\r\n          return (\r\n            <React.Fragment key={month.format('MM-YYYY')}>\r\n\r\n              <div className=\"mt-8\">\r\n                {month.format('MMMM YYYY')}\r\n              </div>\r\n\r\n              <div className=\"entries-container border rounded divide-y\">\r\n                {entriesByDate(entries, recurringEntries, month).map((entry: iEntry) => {\r\n                  currentBalance = entry.type === 'income' ? currentBalance + entry.amount : currentBalance - entry.amount;\r\n                  return (\r\n                    <div\r\n                      key={entry._id}\r\n                      onClick={() => {\r\n                        setSelectedEntry(`${month.format('MM-YYYY')}:${entry._id}`)\r\n                      }}\r\n                      className=\"entry p-2\">\r\n\r\n                      <div className=\"flex justify-between\">\r\n                        <div className=\"w-2/12\">\r\n                          {dayjs(entry.date).format('D.M.')}\r\n                        </div>\r\n                        <div className=\"w-6/12\">\r\n                          {entry.title}\r\n                        </div>\r\n                        <div className={classNames(\"w-2/12\", \"text-right\", \"font-semibold\", {\r\n                          \"text-red-500\": entry.type === 'expense',\r\n                          \"text-green-500\": entry.type === 'income'\r\n                        })}>\r\n                          {entry.type === 'expense' ? '-' : '+'}{entry.amount}\r\n                        </div>\r\n                        <div className=\"w-2/12 text-right font-semibold\">\r\n                          {currentBalance}\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                      {selectedEntry === `${month.format('MM-YYYY')}:${entry._id}` &&\r\n                      <div className=\"flex justify-end space-x-2 text-xs mt-2\">\r\n                        <button\r\n                          onClick={() => {\r\n                            deleteEntry({\r\n                              variables: {\r\n                                query: {_id: entry._id}\r\n                              }\r\n                            }).then(response => {\r\n                              console.log(response);\r\n                            });\r\n                          }}\r\n                          className=\"border-b border-red-500 text-red-500\"\r\n                        >\r\n                          <FontAwesomeIcon icon={[\"far\", \"trash-alt\"]}/> Delete\r\n                        </button>\r\n                        <button\r\n                          className=\"border-b border-indigo-500 text-indigo-500\"\r\n                        >\r\n                          <FontAwesomeIcon icon={[\"fas\", \"pencil-alt\"]} className=\"\"/> Edit\r\n                        </button>\r\n                      </div>\r\n                      }\r\n                    </div>\r\n\r\n\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst entriesByDate = (entries: Array<iEntry>, recurringEntries: Array<iEntry>, date: dayjs.Dayjs) => {\r\n  const filteredByDate = entries.filter((entry) => {\r\n    return dayjs(entry.date).startOf('month').isSame(date.startOf('month'));\r\n  });\r\n\r\n  const result = recurringEntries.map((entry) => {\r\n    const recurringDate = dayjs(entry.date).month(date.get('month')).year(date.get('year')).toISOString();\r\n    return {...entry, date: recurringDate}\r\n  });\r\n\r\n\r\n  return sortEntriesByDate(filteredByDate.concat(result).filter((entry) => {\r\n    return dayjs(entry.date).isAfter(dayjs())\r\n  }));\r\n}\r\n\r\nconst sortEntriesByDate = (entries: Array<iEntry>) => {\r\n  return entries.sort((a, b) => {\r\n    if (a.date > b.date) return 1;\r\n    if (a.date < b.date) return -1;\r\n    return 0;\r\n  })\r\n}\r\n\r\nexport default withRouter(Home)\r\n","import React, {useContext} from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport {useRealmApp} from \"../RealmApp\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport default function LoginScreen() {\r\n    const app = useRealmApp();\r\n    // Toggle between logging users in and registering new users\r\n    const [mode, setMode] = React.useState(\"login\");\r\n    const toggleMode = () => {\r\n        setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\r\n    };\r\n    // Keep track of form input state\r\n    const [email, setEmail] = React.useState(\"\");\r\n    const [password, setPassword] = React.useState(\"\");\r\n    // Keep track of input validation/errors\r\n    const [error, setError] = React.useState({});\r\n    // Whenever the mode changes, clear the form inputs\r\n    React.useEffect(() => {\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n        setError({});\r\n    }, [mode]);\r\n\r\n    const [isLoggingIn, setIsLoggingIn] = React.useState(false);\r\n    const handleLogin = async () => {\r\n        setIsLoggingIn(true);\r\n        setError((e) => ({...e, password: null}));\r\n        try {\r\n            await app.logIn(Realm.Credentials.emailPassword(email, password));\r\n        } catch (err) {\r\n            handleAuthenticationError(err, setError);\r\n        }\r\n    };\r\n\r\n\r\n    if (app.currentUser) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n            <div className=\"max-w-md w-full\">\r\n                <div>\r\n                    <h2 className=\"mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900\">\r\n                        Sign in\r\n                    </h2>\r\n                </div>\r\n                <form className=\"mt-8\">\r\n                    <div className=\"rounded-md shadow-sm\">\r\n                        <div>\r\n                            <input aria-label=\"Email address\" name=\"email\" type=\"email\" required\r\n                                   className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5\"\r\n                                   placeholder=\"Email address\"\r\n                                   onChange={(e) => {\r\n                                       setError((e) => ({...e, email: null}));\r\n                                       setEmail(e.target.value);\r\n                                   }}\r\n                                   value={email}\r\n                            />\r\n                        </div>\r\n                        <div className=\"-mt-px\">\r\n                            <input aria-label=\"Password\" name=\"password\" type=\"password\" required\r\n                                   className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5\"\r\n                                   placeholder=\"Password\"\r\n                                   onChange={(e) => {\r\n                                       setPassword(e.target.value);\r\n                                   }}\r\n                                   value={password}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mt-6\">\r\n                        <button type=\"submit\"\r\n                                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    handleLogin()\r\n                                }}\r\n                        >\r\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\r\n                    <svg\r\n                        className=\"h-5 w-5 text-indigo-500 group-hover:text-indigo-400 transition ease-in-out duration-150\"\r\n                        fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                      <path fillRule=\"evenodd\"\r\n                            d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\"\r\n                            clipRule=\"evenodd\"/>\r\n                    </svg>\r\n                  </span>\r\n                            Sign in\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction handleAuthenticationError(err, setError) {\r\n    const {status, message} = parseAuthenticationError(err);\r\n    const errorType = message || status;\r\n    switch (errorType) {\r\n        case \"invalid username\":\r\n            setError((prevErr) => ({...prevErr, email: \"Invalid email address.\"}));\r\n            break;\r\n        case \"invalid username/password\":\r\n        case \"invalid password\":\r\n        case \"401\":\r\n            setError((err) => ({...err, password: \"Incorrect password.\"}));\r\n            break;\r\n        case \"name already in use\":\r\n        case \"409\":\r\n            setError((err) => ({...err, email: \"Email is already registered.\"}));\r\n            break;\r\n        case \"password must be between 6 and 128 characters\":\r\n        case \"400\":\r\n            setError((err) => ({\r\n                ...err,\r\n                password: \"Password must be between 6 and 128 characters.\",\r\n            }));\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction parseAuthenticationError(err) {\r\n    const parts = err.message.split(\":\");\r\n    const reason = parts[parts.length - 1].trimStart();\r\n    if (!reason) return {status: \"\", message: \"\"};\r\n    const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\r\n    const match = reason.match(reasonRegex);\r\n    const {status, message} = match?.groups ?? {};\r\n    return {status, message};\r\n}\r\n","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\nexport const ErrorStatusContext = React.createContext();\r\n\r\nconst ErrorHandler = ({children}) => {\r\n  const history = useHistory();\r\n  const [errorStatusCode, setErrorStatusCode] = React.useState();\r\n  const app = useRealmApp();\r\n\r\n  // Make sure to \"remove\" this status code whenever the user\r\n  // navigates to a new URL. If we didn't do that, then the user\r\n  // would be \"trapped\" into error pages forever\r\n  React.useEffect(() => {\r\n    // Listen for changes to the current location.\r\n    const unlisten = history.listen(() => setErrorStatusCode(undefined));\r\n\r\n    // cleanup the listener on unmount\r\n    return unlisten;\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (errorStatusCode === 401) {\r\n      // re-login is allowed only if current user is removed\r\n      app.forceLogout();\r\n    }\r\n  }, [errorStatusCode])\r\n\r\n  const renderContent = () => {\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <ErrorStatusContext.Provider value={{setErrorStatusCode}}>\r\n      {renderContent()}\r\n    </ErrorStatusContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ErrorHandler;","import React, {useContext} from \"react\";\nimport { useRealmApp } from \"../RealmApp\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport { ErrorStatusContext } from \"../components/ErrorHandler\";\n\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app, setErrorStatusCode) => {\n  const link = new HttpLink({\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData().catch((error) => {\n        setErrorStatusCode(401);\n      });\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n  });\n\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({ link, cache });\n};\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const { setErrorStatusCode } = useContext(ErrorStatusContext);\n\n  const [client, setClient] = React.useState(createRealmApolloClient(app, setErrorStatusCode));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app, setErrorStatusCode));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n","import React from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n  const app = useRealmApp();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        app.currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute","import React, {useState} from 'react'\r\nimport {withRouter} from \"react-router\"\r\nimport {ADD_ENTRY} from \"../graphql/entryMutations\";\r\nimport {useMutation} from '@apollo/client';\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst AddEntry = (props: Props) => {\r\n  const app = useRealmApp();\r\n  const [addEntry, {data}] = useMutation(ADD_ENTRY);\r\n  const [entryData, setEntryData] = useState({\r\n    title: '',\r\n    amount: 0,\r\n    type: 'expense',\r\n    date: new Date(),\r\n    is_recurring: false,\r\n    user: {\r\n      link: app.currentUser._id\r\n    }\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    addEntry({\r\n      variables: {\r\n        data: entryData\r\n      }\r\n    }).then(response => {\r\n      console.log(response);\r\n    });\r\n   };\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value: any;\r\n\r\n    if (target instanceof HTMLInputElement && target.type === 'checkbox') {\r\n      value = target.checked;\r\n    } else if (target.type === 'date') {\r\n      value = new Date(target.value);\r\n    } else {\r\n      value = target.value;\r\n    }\r\n\r\n    setEntryData({...entryData, [name]: value})\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full\">\r\n        <div>\r\n          <h2 className=\"mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900\">\r\n            Add entry\r\n          </h2>\r\n        </div>\r\n        <form className=\"mt-8\">\r\n          <div className=\"grid grid-cols-2 gap-3\">\r\n            <div className=\"col-span-2\">\r\n              <input\r\n                name=\"title\"\r\n                value={entryData.title}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Title\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-2\">\r\n              <input\r\n                name=\"date\"\r\n                value={entryData.date.toISOString().split('T')[0]}\r\n                onChange={handleInputChange}\r\n                type=\"date\"\r\n                placeholder=\"Date\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-1\">\r\n              <input\r\n                name=\"amount\"\r\n                value={entryData.amount}\r\n                onChange={handleInputChange}\r\n                type=\"number\"\r\n                min=\"0\"\r\n                placeholder=\"Amount\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-1\">\r\n              <select\r\n                name=\"type\"\r\n                value={entryData.type}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Type\"\r\n                className=\"mt-1 block form-select w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\">\r\n                <option value=\"expense\">Expense</option>\r\n                <option value=\"income\">Income</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"col-span-2 flex items-start\">\r\n              <div className=\"items-center h-5\">\r\n                <input\r\n                  onChange={handleInputChange}\r\n                  checked={entryData.is_recurring}\r\n                  id=\"is_recurring\"\r\n                  name=\"is_recurring\"\r\n                  type=\"checkbox\"\r\n                  className=\"form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out\"/>\r\n              </div>\r\n              <div className=\"ml-3 text-sm leading-5\">\r\n                <label htmlFor=\"is_recurring\" className=\"font-medium text-gray-700\">Is recurring</label>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"mt-6\">\r\n            <button\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit()\r\n              }}\r\n              type=\"submit\"\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(AddEntry)\r\n","import React from 'react'\r\nimport {HashRouter as Router, Route} from \"react-router-dom\"\r\nimport Home from './components/Home'\r\nimport LoginScreen from './components/LoginScreen'\r\nimport RealmApolloProvider from \"./graphql/RealmApolloProvider\";\r\nimport {RealmAppProvider} from \"./RealmApp\";\r\nimport './App.css';\r\nimport ErrorHandler from \"./components/ErrorHandler\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport AddEntry from \"./components/AddEntry\";\r\n\r\nexport const APP_ID = \"expenses-planner-react-tcjrv\";\r\n\r\nfunction App() {\r\n  return (\r\n    <RealmAppProvider appId={APP_ID}>\r\n      <Router>\r\n        <ErrorHandler>\r\n          <RealmApolloProvider>\r\n            <div className=\"App\">\r\n              <PrivateRoute exact path=\"/\" component={Home}/>\r\n              <PrivateRoute exact path=\"/entries/add\" component={AddEntry}/>\r\n              <Route exact path=\"/login\" component={LoginScreen}/>\r\n            </div>\r\n          </RealmApolloProvider>\r\n        </ErrorHandler>\r\n      </Router>\r\n    </RealmAppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}