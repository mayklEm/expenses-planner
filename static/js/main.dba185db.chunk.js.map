{"version":3,"sources":["firebase.js","Auth.js","components/Entry.tsx","components/EntryForm.tsx","components/Home.tsx","components/Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["app","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","useEffect","auth","onAuthStateChanged","Provider","value","Entry","title","balance","className","EntryForm","handleSubmit","state","setState","onSubmit","e","preventDefault","name","onChange","target","parseInt","MonthGroup","isNextMonth","currentMonth","newDate","getMonth","getFullYear","Date","withRouter","props","initialEntries","date","entries","setEntries","newBalance","formatter","Intl","DateTimeFormat","month","sortedEntries","sort","a","b","console","log","useContext","randomMonth","Math","floor","random","readOnly","JSON","stringify","map","entry","index","nextMonth","Fragment","key","format","to","history","handleLogin","useCallback","event","elements","email","password","signInWithEmailAndPassword","push","alert","htmlFor","type","placeholder","App","exact","path","component","Home","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dba185db.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_SENDER_ID\r\n});\r\n\r\nexport default app;","import React, { useEffect, useState } from 'react'\r\nimport app from \"./firebase\"\r\n\r\nexport const AuthContext = React.createContext()\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n\r\n    const [currentUser, setCurrentUser] = useState(null)\r\n\r\n    useEffect(() => {\r\n        app.auth().onAuthStateChanged(setCurrentUser)\r\n    }, [])\r\n    \r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                currentUser\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","import React, { ReactElement } from 'react'\r\n\r\ninterface Props {\r\n  title: String,\r\n  value: number,\r\n  balance: number\r\n}\r\n\r\nexport default function Entry({ title, value, balance }: Props): ReactElement {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-2 d-flex py-2\">\r\n        <div className=\"float-right text-muted\">Jan 9th</div>\r\n      </div>\r\n\r\n\r\n      <div className=\"col-auto text-center flex-column d-none d-sm-flex\">\r\n        <h5 className=\"m-2\">\r\n          <span className=\"badge badge-pill bg-light border\">&nbsp;</span>\r\n        </h5>\r\n        <div className=\"row h-100\">\r\n          <div className=\"col border-right\">&nbsp;</div>\r\n          <div className=\"col\">&nbsp;</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"col-7 pb-2 pt-2\">\r\n        <div className=\"card\">\r\n          <div className=\"row no-gutters\">\r\n            <div className=\"col-6 p-2\">\r\n              <div className=\"text-muted\">{title}</div>\r\n            </div>\r\n            <div className=\"col-3 p-2\">\r\n              <div className=\"float-right text-muted\">{value}</div>\r\n            </div>\r\n            <div className=\"col-3 p-2 border-left\">\r\n              <div className=\"text-right\">{balance}</div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\ninterface Props {\r\n  handleSubmit: (title: string, value: number) => void\r\n}\r\n\r\nconst EntryForm = ({ handleSubmit }: Props) => {\r\n\r\n  const initial = {\r\n    title: \"\",\r\n    value: 0 \r\n  }\r\n\r\n  const [state, setState] = useState(initial);\r\n\r\n  return (\r\n    <form onSubmit={(e) => {\r\n        e.preventDefault()\r\n        handleSubmit(state.title, state.value)}\r\n      }>\r\n      <label>\r\n        Title:\r\n        <input name=\"title\" value={state.title} onChange={(e) => setState({...state, title: e.target.value})}/>\r\n      </label>\r\n      <label>\r\n        Value:\r\n        <input name=\"value\" value={state.value} onChange={(e) => setState({...state, value: parseInt(e.target.value)})}/>\r\n      </label>\r\n      <button >OK</button>\r\n\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default EntryForm","import React, { useState, useContext } from 'react'\r\nimport Entry from './Entry'\r\nimport EntryForm from './EntryForm'\r\nimport { AuthContext } from \"../Auth\"\r\nimport { withRouter, Redirect } from \"react-router\"\r\n\r\ninterface Props {\r\n  \r\n}\r\n\r\ninterface iEntry {\r\n  date: Date,\r\n  title: String,\r\n  value: number\r\n}\r\n\r\nconst Home = (props: Props) => {\r\n  const initialEntries: Array<iEntry> = [\r\n    {\r\n      date: new Date(\"2020-02-16\"),\r\n      title: \"Entry 1\",\r\n      value: -111\r\n    },\r\n    {\r\n      date: new Date(\"2020-03-20\"),\r\n      title: \"Entry 2\",\r\n      value: -111\r\n    }\r\n  ]\r\n  const initial: number = 2000\r\n  const [balance, setBalance] = useState(initial)\r\n  const [entries, setEntries] = useState(initialEntries)\r\n\r\n  let newBalance = balance\r\n\r\n  let currentMonth = new Date(\"2000-01-01\")\r\n\r\n  const formatter = new Intl.DateTimeFormat('en', { month: 'long' })\r\n\r\n  const sortedEntries = entries.sort((a, b) => {\r\n    if (a.date > b.date) return 1;\r\n    if (a.date < b.date) return -1;\r\n    return 0;\r\n  })\r\n\r\n  console.log('sortedEntries', sortedEntries)\r\n\r\n  const { currentUser } = useContext(AuthContext)\r\n\r\n  if (!currentUser) {\r\n    return <Redirect to=\"/login\" />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <EntryForm\r\n          handleSubmit={(title, value) => {\r\n            const randomMonth = Math.floor(Math.random() * Math.floor(11)) + 1\r\n            console.log('randomMonth', randomMonth)\r\n            setEntries([...entries, {\r\n              date: new Date(`2020-${randomMonth}-20`),\r\n              title: title,\r\n              value: value\r\n            }])\r\n          }}\r\n        />\r\n        <textarea readOnly={true} value={JSON.stringify(entries)}></textarea>\r\n        <div className=\"container py-2 mt-4 mb-4\">\r\n          {entries.sort((a, b) => {\r\n            if (a.date > b.date) return 1;\r\n            if (a.date < b.date) return -1;\r\n            return 0;\r\n          }).map((entry, index) => {\r\n            newBalance += entry.value\r\n            const nextMonth = isNextMonth(currentMonth, entry.date)\r\n            currentMonth = nextMonth ? nextMonth : currentMonth\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                {nextMonth &&\r\n                  <MonthGroup title={formatter.format(nextMonth)}></MonthGroup>\r\n                }\r\n\r\n                <Entry {...entry} balance={newBalance}></Entry>\r\n              </React.Fragment>\r\n            )\r\n          })}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface iProps {\r\n  title: String\r\n}\r\n\r\nconst MonthGroup = ({ title }: iProps) => {\r\n  return (\r\n    <div className=\"row\">\r\n\r\n      <div className=\"col-2 d-flex py-2\">\r\n        <div className=\"float-right text-muted\">{title}</div>\r\n      </div>\r\n\r\n\r\n      <div className=\"col-auto text-center flex-column d-none d-sm-flex\">\r\n\r\n        <div className=\"row h-100\">\r\n          <div className=\"col border-right\">&nbsp;</div>\r\n          <div className=\"col\">&nbsp;</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"col-7 pb-2 pt-2\">\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst isNextMonth = (currentMonth: Date, newDate: Date) => {\r\n  if (currentMonth.getMonth() === newDate.getMonth() && currentMonth.getFullYear() === newDate.getFullYear()) {\r\n    return false;\r\n  }\r\n  return new Date(newDate.getFullYear(), newDate.getMonth(), 1);\r\n}\r\n\r\nexport default withRouter(Home)\r\n","import React, { useCallback, useContext } from 'react'\r\nimport { withRouter, Redirect } from \"react-router\"\r\nimport app from '../firebase'\r\nimport { AuthContext } from \"../Auth\"\r\n\r\ninterface Props {\r\n  history: any\r\n}\r\n\r\nconst Login = ({ history }: Props) => {\r\n\r\n  const handleLogin = useCallback(\r\n    async event => {\r\n      event.preventDefault()\r\n      const { email, password } = event.target.elements\r\n\r\n      try {\r\n        await app.auth().signInWithEmailAndPassword(email.value, password.value)\r\n        history.push(\"/\")\r\n      } catch (error) {\r\n        alert(error)\r\n      }\r\n    },\r\n    [history],\r\n  )\r\n\r\n  const { currentUser } = useContext(AuthContext)\r\n\r\n  if (currentUser) {\r\n    return <Redirect to=\"/\" />\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Log in</h1>\r\n      <form onSubmit={handleLogin}>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input type=\"email\" className=\"form-control\" name=\"email\" placeholder=\"Email\" />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"Email\" />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(Login)\r\n","import React from 'react'\r\nimport { AuthProvider } from \"./Auth\"\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\r\nimport Home from './components/Home'\r\nimport Login from './components/Login'\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthProvider>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n        </div>\r\n      </Router>\r\n    </AuthProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}