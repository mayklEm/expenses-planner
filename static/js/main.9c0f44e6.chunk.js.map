{"version":3,"sources":["graphql/useEntries.js","graphql/entryMutations.js","components/Home.tsx","RealmApp.js","components/LoginScreen.js","components/ErrorHandler.js","graphql/RealmApolloProvider.js","components/PrivateRoute.js","components/AddEntry.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ENTRIES","gql","ADD_ENTRY","DELETE_ENTRY","library","add","faTrashAlt","faPencilAlt","classNames","require","entriesByDate","entries","recurringEntries","date","filteredByDate","filter","entry","dayjs","startOf","isSame","result","map","recurringDate","month","get","year","toISOString","sortEntriesByDate","concat","sort","a","b","withRouter","props","useState","initialBalance","setInitialBalance","numberOfMonths","setNumberOfMonths","setEntries","setRecurringEntries","generatedMonths","setGeneratedMonths","useMutation","deleteEntry","selectedEntry","setSelectedEntry","currentBalance","useLazyQuery","onCompleted","console","log","onError","error","fetch","loading","data","useEffect","months","i","push","className","htmlFor","name","id","defaultValue","type","onChange","event","parseInt","target","value","min","Fragment","key","format","amount","_id","onClick","title","hidden","variables","query","then","response","icon","RealmAppContext","React","createContext","useRealmApp","app","useContext","Error","RealmAppProvider","appId","children","Realm","setApp","currentUser","setCurrentUser","credentials","logIn","logOut","wrapped","forceLogout","accessToken","refreshToken","Provider","LoginScreen","mode","email","setEmail","password","setPassword","setError","setIsLoggingIn","handleLogin","e","emailPassword","handleAuthenticationError","to","aria-label","required","placeholder","preventDefault","fill","viewBox","fillRule","d","clipRule","err","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","ErrorStatusContext","ErrorHandler","history","useHistory","errorStatusCode","setErrorStatusCode","listen","undefined","createRealmApolloClient","link","HttpLink","uri","options","refreshCustomData","catch","headers","Authorization","cache","InMemoryCache","ApolloClient","RealmApolloProvider","client","setClient","PrivateRoute","Component","component","rest","render","pathname","state","from","location","addEntry","Date","is_recurring","user","entryData","setEntryData","handleInputChange","HTMLInputElement","checked","App","exact","path","Home","AddEntry","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mqBAEO,IAAMA,EAAUC,cAAH,K,obCAb,IAAMC,EAAYD,cAAH,KASTE,EAAeF,cAAH,KCCzBG,IAAQC,IAAIC,KACZF,IAAQC,IAAIE,KAEZ,IAAMC,EAAaC,EAAQ,KAiKrBC,EAAgB,SAACC,EAAwBC,EAAiCC,GAC9E,IAAMC,EAAiBH,EAAQI,QAAO,SAACC,GACrC,OAAOC,IAAMD,EAAMH,MAAMK,QAAQ,SAASC,OAAON,EAAKK,QAAQ,aAG1DE,EAASR,EAAiBS,KAAI,SAACL,GACnC,IAAMM,EAAgBL,IAAMD,EAAMH,MAAMU,MAAMV,EAAKW,IAAI,UAAUC,KAAKZ,EAAKW,IAAI,SAASE,cACxF,OAAO,2BAAIV,GAAX,IAAkBH,KAAMS,OAG1B,OAAOK,EAAkBb,EAAec,OAAOR,KAG3CO,EAAoB,SAAChB,GACzB,OAAOA,EAAQkB,MAAK,SAACC,EAAGC,GACtB,OAAID,EAAEjB,KAAOkB,EAAElB,KAAa,EACxBiB,EAAEjB,KAAOkB,EAAElB,MAAc,EACtB,MAIImB,eAvKF,SAACC,GAAkB,IAAD,EACeC,mBAAS,KADxB,mBACtBC,EADsB,KACNC,EADM,OAEeF,mBAAiB,GAFhC,mBAEtBG,EAFsB,KAENC,EAFM,OAGCJ,mBAAS,IAHV,mBAGtBvB,EAHsB,KAGb4B,EAHa,OAImBL,mBAAS,IAJ5B,mBAItBtB,EAJsB,KAIJ4B,EAJI,OAKiBN,mBAA6B,IAL9C,mBAKtBO,EALsB,KAKLC,EALK,OAMPC,sBAAYxC,GAA3ByC,EANsB,sBAOaV,mBAAS,IAPtB,mBAOtBW,EAPsB,KAOPC,EAPO,KAUzBC,EAAiBZ,EAVQ,EAYWa,uBAAahD,EAAS,CAC5DiD,YAAa,SAAC7B,GACZ8B,QAAQC,IAAI,uBAAwB/B,GACpCmB,EAAWnB,EAAOT,SAClB6B,EAAoBpB,EAAOR,mBAE7BwC,QAAS,SAACC,GACRH,QAAQC,IAAIE,MAnBa,mBAYtBC,EAZsB,cAYdC,QAZc,EAYLF,MAZK,EAYEG,KAuB/B,OAZAC,qBAAU,WACRH,MACC,IAEHG,qBAAU,WAER,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAItB,EAAgBsB,IAClCD,EAAOE,KAAK3C,MAAQZ,IAAIsD,EAAG,SAASzC,QAAQ,UAE9CwB,EAAmBgB,KAClB,CAACrB,IAGF,yBACEwB,UAAU,0GACV,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,UAAUD,UAAU,qDAAnC,mBAGA,2BACEE,KAAK,UACLC,GAAG,UACHC,aAAc9B,EACd+B,KAAK,SACLC,SAAU,SAACC,GACThC,EAAkBiC,SAASD,EAAME,OAAOC,QAAUpC,IAEpD0B,UAAU,uNAGd,yBAAKA,UAAU,cACb,2BAAOC,QAAQ,SAASD,UAAU,qDAAlC,oBAGA,2BACEE,KAAK,SACLC,GAAG,SACHC,aAAc5B,EACdmC,IAAI,IACJN,KAAK,SACLC,SAAU,SAACC,GACT9B,EAAkB+B,SAASD,EAAME,OAAOC,QAAUlC,IAEpDwB,UAAU,wNAIfpB,EAAgBpB,KAAI,SAACE,GACpB,OACE,kBAAC,IAAMkD,SAAP,CAAgBC,IAAKnD,EAAMoD,OAAO,YAEhC,yBAAKd,UAAU,QACZtC,EAAMoD,OAAO,cAGhB,yBAAKd,UAAU,6CACZnD,EAAcC,EAASC,EAAkBW,GAAOF,KAAI,SAACL,GAEpD,OADA+B,EAAgC,WAAf/B,EAAMkD,KAAoBnB,EAAiB/B,EAAM4D,OAAS7B,EAAiB/B,EAAM4D,OAEhG,kBAAC,IAAMH,SAAP,CAAgBC,IAAK1D,EAAM6D,KACzB,yBACEC,QAAS,WAAOhC,EAAiB,GAAD,OAAIvB,EAAMoD,OAAO,WAAjB,YAA+B3D,EAAM6D,OACrEhB,UAAU,aAEV,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,UACZ5C,IAAMD,EAAMH,MAAM8D,OAAO,SAE5B,yBAAKd,UAAU,UACZ7C,EAAM+D,OAET,yBAAKlB,UAAWrD,EAAW,SAAU,aAAc,gBAAiB,CAClE,eAA+B,YAAfQ,EAAMkD,KACtB,iBAAiC,WAAflD,EAAMkD,QAER,YAAflD,EAAMkD,KAAqB,IAAM,IAAKlD,EAAM4D,QAE/C,yBAAKf,UAAU,mCACZd,IAIL,yBAAKc,UAAWrD,EAAW,0CAA2C,CACpEwE,OAAQnC,IAAa,UAAQtB,EAAMoD,OAAO,WAArB,YAAmC3D,EAAM6D,QAE9D,4BACEC,QAAS,WACPlC,EAAY,CACVqC,UAAW,CACTC,MAAO,CAACL,IAAK7D,EAAM6D,QAEpBM,MAAK,SAAAC,GACNlC,QAAQC,IAAIiC,OAGhBvB,UAAU,wCAEV,kBAAC,IAAD,CAAiBwB,KAAM,CAAC,MAAO,eAZjC,WAcA,4BACExB,UAAU,8CAEV,kBAAC,IAAD,CAAiBwB,KAAM,CAAC,MAAO,cAAexB,UAAU,KAH1D,yB,wCCvJpByB,EAAkBC,IAAMC,gBAEjBC,EAAc,WACvB,IAAMC,EAAMH,IAAMI,WAAWL,GAC7B,IAAKI,EACD,MAAM,IAAIE,MAAJ,gEAIV,OAAOF,GAGEG,EAAmB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAC/BR,IAAMrD,SAAS,IAAI8D,IAAUF,IADE,mBAC9CJ,EAD8C,KACzCO,EADyC,KAErDV,IAAM9B,WAAU,WACZwC,EAAO,IAAID,IAAUF,MACtB,CAACA,IAJiD,MAOfP,IAAMrD,SAASwD,EAAIQ,aAPJ,mBAO9CA,EAP8C,KAOjCC,EAPiC,iDAQrD,WAAqBC,GAArB,SAAAtE,EAAA,sEACU4D,EAAIW,MAAMD,GADpB,OAGID,EAAeT,EAAIQ,aAHvB,4CARqD,kEAarD,4BAAApE,EAAA,gFAEU4D,EAAIQ,mBAFd,aAEU,EAAiBI,SAF3B,OAKIH,EAAeT,EAAIQ,aALvB,4CAbqD,sBA6BrD,IAAMK,EAAO,2BAAQb,GAAR,IAAaQ,cAAaG,MA7Bc,4CA6BPC,OA7BO,2CA6BCE,YARtD,WACQN,IACAA,EAAYO,YAAc,KAC1BP,EAAYQ,aAAe,KAC3BP,EAAe,UAMvB,OACI,kBAACb,EAAgBqB,SAAjB,CAA0BpC,MAAOgC,GAC5BR,IC3CE,SAASa,IACpB,IAAMlB,EAAMD,IADsB,EAGVF,IAAMrD,SAAS,SAHL,mBAG3B2E,EAH2B,aAQRtB,IAAMrD,SAAS,KARP,mBAQ3B4E,EAR2B,KAQpBC,EARoB,OASFxB,IAAMrD,SAAS,IATb,mBAS3B8E,EAT2B,KASjBC,EATiB,OAWR1B,IAAMrD,SAAS,IAXP,mBAWpBgF,GAXoB,WAalC3B,IAAM9B,WAAU,WACZsD,EAAS,IACTE,EAAY,IACZC,EAAS,MACV,CAACL,IAjB8B,MAmBItB,IAAMrD,UAAS,GAnBnB,mBAmBdiF,GAnBc,WAoB5BC,EAAW,uCAAG,sBAAAtF,EAAA,6DAChBqF,GAAe,GACfD,GAAS,SAACG,GAAD,mBAAC,eAAWA,GAAZ,IAAeL,SAAU,UAFlB,kBAINtB,EAAIW,MAAML,IAAkBsB,cAAcR,EAAOE,IAJ3C,uDAMZO,EAA0B,EAAD,GAAML,GANnB,yDAAH,qDAWjB,OAAIxB,EAAIQ,YACG,kBAAC,IAAD,CAAUsB,GAAG,MAIpB,yBAAK3D,UAAU,uFACX,yBAAKA,UAAU,mBACX,6BACI,wBAAIA,UAAU,oEAAd,YAIJ,0BAAMA,UAAU,QACZ,yBAAKA,UAAU,wBACX,6BACI,2BAAO4D,aAAW,gBAAgB1D,KAAK,QAAQG,KAAK,QAAQwD,UAAQ,EAC7D7D,UAAU,4OACV8D,YAAY,gBACZxD,SAAU,SAACkD,GACPH,GAAS,SAACG,GAAD,mBAAC,eAAWA,GAAZ,IAAeP,MAAO,UAC/BC,EAASM,EAAE/C,OAAOC,QAEtBA,MAAOuC,KAGlB,yBAAKjD,UAAU,UACX,2BAAO4D,aAAW,WAAW1D,KAAK,WAAWG,KAAK,WAAWwD,UAAQ,EAC9D7D,UAAU,4OACV8D,YAAY,WACZxD,SAAU,SAACkD,GACPJ,EAAYI,EAAE/C,OAAOC,QAEzBA,MAAOyC,MAItB,yBAAKnD,UAAU,QACX,4BAAQK,KAAK,SACLL,UAAU,sSACViB,QAAS,SAACuC,GACNA,EAAEO,iBACFR,MAGlB,0BAAMvD,UAAU,oDACd,yBACIA,UAAU,0FACVgE,KAAK,eAAeC,QAAQ,aAC9B,0BAAMC,SAAS,UACTC,EAAE,yGACFC,SAAS,cAbb,eAyBxB,SAASV,EAA0BW,EAAKhB,GAAW,IAAD,EA4BlD,SAAkCgB,GAAM,IAAD,EAC7BC,EAAQD,EAAIE,QAAQC,MAAM,KAC1BC,EAASH,EAAMA,EAAMI,OAAS,GAAGC,YACvC,IAAKF,EAAQ,MAAO,CAACG,OAAQ,GAAIL,QAAS,IAC1C,IAAMM,EAAW,YAAG,oGAAH,sBACXC,EAAQL,EAAOK,MAAMD,GALQ,mBAMTC,QANS,IAMTA,OANS,EAMTA,EAAOC,cANE,QAMQ,GAApCH,EAN4B,EAM5BA,OAAQL,EANoB,EAMpBA,QACf,MAAO,CAACK,SAAQL,WAlCUS,CAAyBX,GAA5CO,EADuC,EACvCA,OAEP,OAH8C,EAC/BL,SACcK,GAEzB,IAAK,mBACDvB,GAAS,SAAC4B,GAAD,mBAAC,eAAiBA,GAAlB,IAA2BhC,MAAO,8BAC3C,MACJ,IAAK,4BACL,IAAK,mBACL,IAAK,MACDI,GAAS,SAACgB,GAAD,mBAAC,eAAaA,GAAd,IAAmBlB,SAAU,2BACtC,MACJ,IAAK,sBACL,IAAK,MACDE,GAAS,SAACgB,GAAD,mBAAC,eAAaA,GAAd,IAAmBpB,MAAO,oCACnC,MACJ,IAAK,gDACL,IAAK,MACDI,GAAS,SAACgB,GAAD,mBAAC,eACHA,GADE,IAELlB,SAAU,uDClHnB,IAAM+B,EAAqBxD,IAAMC,gBAoCzBwD,EAlCM,SAAC,GAAgB,IAAfjD,EAAc,EAAdA,SACfkD,EAAUC,cADmB,EAEW3D,IAAMrD,WAFjB,mBAE5BiH,EAF4B,KAEXC,EAFW,KAG7B1D,EAAMD,IAKZF,IAAM9B,WAAU,WAKd,OAHiBwF,EAAQI,QAAO,kBAAMD,OAAmBE,QAIxD,IAEH/D,IAAM9B,WAAU,WACU,MAApB0F,GAEFzD,EAAIc,gBAEL,CAAC2C,IAMJ,OACE,kBAACJ,EAAmBpC,SAApB,CAA6BpC,MAAO,CAAC6E,uBAJ9BrD,IClBLwD,EAA0B,SAAC7D,EAAK0D,GACpC,IAAMI,EAAO,IAAIC,WAAS,CACxBC,IAAI,iDAAD,OAAmDhE,EAAI1B,GAAvD,YAEHV,MAAM,SAAD,sGAAC,CAAD,uCAAE,WAAOoG,EAAKC,GAAZ,SAAA7H,EAAA,yDACA4D,EAAIQ,YADJ,sBAEG,IAAIN,MAAJ,4CAFH,uBAKCF,EAAIQ,YAAY0D,oBAAoBC,OAAM,SAACxG,GAC/C+F,EAAmB,QANhB,cASLO,EAAQG,QAAQC,cAAhB,iBAA0CrE,EAAIQ,YAAYO,aATrD,kBAUEnD,MAAMoG,EAAKC,IAVb,2CAAF,2DAcDK,EAAQ,IAAIC,gBAElB,OAAO,IAAIC,eAAa,CAAEV,OAAMQ,WAGnB,SAASG,EAAT,GAA4C,IAAbpE,EAAY,EAAZA,SACtCL,EAAMD,IACJ2D,EAAuBzD,qBAAWoD,GAAlCK,mBAFgD,EAI5B7D,IAAMrD,SAASqH,EAAwB7D,EAAK0D,IAJhB,mBAIjDgB,EAJiD,KAIzCC,EAJyC,KAQxD,OAHA9E,IAAM9B,WAAU,WACd4G,EAAUd,EAAwB7D,EAAK0D,MACtC,CAAC1D,IACG,kBAAC,iBAAD,CAAgB0E,OAAQA,GAASrE,G,mBCtB3BuE,EAjBM,SAAC,GAAqC,IAAzBC,EAAwB,EAAnCC,UAAyBC,EAAU,6BAClD/E,EAAMD,IAEZ,OACE,kBAAC,IAAD,iBACMgF,EADN,CAEEC,OAAQ,SAAAzI,GAAK,OACXyD,EAAIQ,YACF,kBAACqE,EAActI,GAEf,kBAAC,IAAD,CAAUuF,GAAI,CAACmD,SAAU,SAAUC,MAAO,CAACC,KAAM5I,EAAM6I,kB,QC4HlD9I,eAhIE,SAACC,GAChB,IAAMyD,EAAMD,IADqB,EAEN9C,sBAAYzC,GAFN,mBAE1B6K,EAF0B,aAEfvH,KACgBtB,mBAAS,CACzC6C,MAAO,GACPH,OAAQ,EACRV,KAAM,UACNrD,KAAM,IAAImK,KACVC,cAAc,EACdC,KAAM,CACJ1B,KAAM9D,EAAIQ,YAAYrB,QAVO,mBAG1BsG,EAH0B,KAGfC,EAHe,KAwB3BC,EAAoB,SAACjH,GACzB,IAEIG,EAFED,EAASF,EAAME,OACfP,EAAOO,EAAOP,KAIlBQ,EADED,aAAkBgH,kBAAoC,aAAhBhH,EAAOJ,KACvCI,EAAOiH,QACU,SAAhBjH,EAAOJ,KACR,IAAI8G,KAAK1G,EAAOC,OAEhBD,EAAOC,MAGjB6G,EAAa,2BAAID,GAAL,kBAAiBpH,EAAOQ,MAGtC,OACE,yBAAKV,UAAU,uFACb,yBAAKA,UAAU,mBACb,6BACE,wBAAIA,UAAU,oEAAd,cAIF,0BAAMA,UAAU,QACd,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,cACb,2BACEE,KAAK,QACLQ,MAAO4G,EAAUpG,MACjBZ,SAAUkH,EACV1D,YAAY,QACZ9D,UAAU,uNAGd,yBAAKA,UAAU,cACb,2BACEE,KAAK,OACLQ,MAAO4G,EAAUtK,KAAKa,cAAc2G,MAAM,KAAK,GAC/ClE,SAAUkH,EACVnH,KAAK,OACLyD,YAAY,OACZ9D,UAAU,uNAGd,yBAAKA,UAAU,cACb,2BACEE,KAAK,SACLQ,MAAO4G,EAAUvG,OACjBT,SAAUkH,EACVnH,KAAK,SACLM,IAAI,IACJmD,YAAY,SACZ9D,UAAU,uNAGd,yBAAKA,UAAU,cACb,4BACEE,KAAK,OACLQ,MAAO4G,EAAUjH,KACjBC,SAAUkH,EACV1D,YAAY,OACZ9D,UAAU,+NACV,4BAAQU,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,YAIJ,yBAAKV,UAAU,+BACb,yBAAKA,UAAU,oBACb,2BACEM,SAAUkH,EACVE,QAASJ,EAAUF,aACnBjH,GAAG,eACHD,KAAK,eACLG,KAAK,WACLL,UAAU,+EAEd,yBAAKA,UAAU,0BACb,2BAAOC,QAAQ,eAAeD,UAAU,6BAAxC,mBAON,yBAAKA,UAAU,QACb,4BACEiB,QAAS,SAACuC,GACRA,EAAEO,iBAlGdmD,EAAS,CACP9F,UAAW,CACTzB,KAAM2H,KAEPhG,MAAK,SAAAC,GACNlC,QAAQC,IAAIiC,OAgGJlB,KAAK,SACLL,UAAU,uSANZ,cC1FG2H,MAlBf,WACE,OACE,kBAAC,EAAD,CAAkB1F,MAJA,gCAKhB,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAACqE,EAAD,KACE,yBAAKtG,UAAU,OACb,kBAAC,EAAD,CAAc4H,OAAK,EAACC,KAAK,IAAIlB,UAAWmB,IACxC,kBAAC,EAAD,CAAcF,OAAK,EAACC,KAAK,eAAelB,UAAWoB,IACnD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,SAASlB,UAAW5D,UCVhCiF,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASpD,MACvB,2DCZNqD,IAAStB,OACP,kBAAC,IAAMuB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnH,MAAK,SAAAoH,GACJA,EAAaC,gBAEd3C,OAAM,SAAAxG,GACLH,QAAQG,MAAMA,EAAM+E,a","file":"static/js/main.9c0f44e6.chunk.js","sourcesContent":["import {gql} from '@apollo/client';\r\n\r\nexport const ENTRIES = gql`\r\n  fragment EntryData on Entry {\r\n    _id\r\n    title\r\n    type\r\n    amount\r\n    is_recurring\r\n    date\r\n  }\r\n  \r\n  query GetAllEntries {\r\n    entries (\r\n      query: { is_recurring: false }\r\n      sortBy: DATE_ASC\r\n    ) {...EntryData}\r\n    \r\n    recurringEntries: entries (\r\n      query: { is_recurring: true }\r\n    ) {...EntryData}\r\n  }\r\n`;","import {gql} from '@apollo/client';\r\n\r\nexport const ADD_ENTRY = gql`\r\n  mutation AddEntry($data: EntryInsertInput!) {\r\n    insertOneEntry(data: $data) {\r\n      _id\r\n      title\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_ENTRY = gql`\r\n  mutation DeleteEntry($query: EntryQueryInput!) {\r\n    deleteOneEntry(query: $query) {\r\n      _id\r\n      title\r\n    }\r\n  }\r\n`;","import React, {useEffect, useState} from 'react'\r\n// import Entry from './Entry'\r\nimport {withRouter} from \"react-router\"\r\nimport {ENTRIES} from \"../graphql/useEntries\";\r\nimport {useLazyQuery, gql, useMutation} from '@apollo/client';\r\nimport dayjs from \"dayjs\";\r\nimport {library} from '@fortawesome/fontawesome-svg-core'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTrashAlt} from '@fortawesome/free-regular-svg-icons'\r\nimport {faPencilAlt} from '@fortawesome/free-solid-svg-icons'\r\nimport {DELETE_ENTRY} from \"../graphql/entryMutations\";\r\n\r\nlibrary.add(faTrashAlt);\r\nlibrary.add(faPencilAlt);\r\n\r\nconst classNames = require('classnames');\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface iEntry {\r\n  _id: string,\r\n  date: string,\r\n  title: String,\r\n  type: String,\r\n  amount: number,\r\n  is_recurring: boolean,\r\n}\r\n\r\nconst Home = (props: Props) => {\r\n  const [initialBalance, setInitialBalance] = useState(10000);\r\n  const [numberOfMonths, setNumberOfMonths] = useState<number>(4);\r\n  const [entries, setEntries] = useState([]);\r\n  const [recurringEntries, setRecurringEntries] = useState([]);\r\n  const [generatedMonths, setGeneratedMonths] = useState<Array<dayjs.Dayjs>>([]);\r\n  const [deleteEntry] = useMutation(DELETE_ENTRY);\r\n  const [selectedEntry, setSelectedEntry] = useState('');\r\n\r\n\r\n  let currentBalance = initialBalance;\r\n\r\n  const [fetch, {loading, error, data}] = useLazyQuery(ENTRIES, {\r\n    onCompleted: (result) => {\r\n      console.log('completed with data:', result);\r\n      setEntries(result.entries);\r\n      setRecurringEntries(result.recurringEntries);\r\n    },\r\n    onError: (error) => {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let months = [];\r\n    for (let i = 0; i < numberOfMonths; i++) {\r\n      months.push(dayjs().add(i, 'month').startOf('month'));\r\n    }\r\n    setGeneratedMonths(months);\r\n  }, [numberOfMonths]);\r\n\r\n  return (\r\n    <div\r\n      className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8 text-xs md:text-sm\">\r\n      <div className=\"max-w-2xl w-full\">\r\n        <div className=\"grid grid-cols-2 gap-3\">\r\n          <div className=\"col-span-1\">\r\n            <label htmlFor=\"balance\" className=\"block text-sm font-medium leading-5 text-gray-700\">\r\n              Initial balance\r\n            </label>\r\n            <input\r\n              name=\"balance\"\r\n              id=\"balance\"\r\n              defaultValue={initialBalance}\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                setInitialBalance(parseInt(event.target.value) || initialBalance)\r\n              }}\r\n              className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n            />\r\n          </div>\r\n          <div className=\"col-span-1\">\r\n            <label htmlFor=\"months\" className=\"block text-sm font-medium leading-5 text-gray-700\">\r\n              Number of months\r\n            </label>\r\n            <input\r\n              name=\"months\"\r\n              id=\"months\"\r\n              defaultValue={numberOfMonths}\r\n              min=\"1\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                setNumberOfMonths(parseInt(event.target.value) || numberOfMonths)\r\n              }}\r\n              className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n            />\r\n          </div>\r\n        </div>\r\n        {generatedMonths.map((month) => {\r\n          return (\r\n            <React.Fragment key={month.format('MM-YYYY')}>\r\n\r\n              <div className=\"mt-8\">\r\n                {month.format('MMMM YYYY')}\r\n              </div>\r\n\r\n              <div className=\"entries-container border rounded divide-y\">\r\n                {entriesByDate(entries, recurringEntries, month).map((entry: iEntry) => {\r\n                  currentBalance = entry.type === 'income' ? currentBalance + entry.amount : currentBalance - entry.amount;\r\n                  return (\r\n                    <React.Fragment key={entry._id}>\r\n                      <div\r\n                        onClick={() => {setSelectedEntry(`${month.format('MM-YYYY')}:${entry._id}`)}}\r\n                        className=\"entry p-2\">\r\n\r\n                        <div className=\"flex justify-between\">\r\n                          <div className=\"w-2/12\">\r\n                            {dayjs(entry.date).format('D.M.')}\r\n                          </div>\r\n                          <div className=\"w-6/12\">\r\n                            {entry.title}\r\n                          </div>\r\n                          <div className={classNames(\"w-2/12\", \"text-right\", \"font-semibold\", {\r\n                            \"text-red-500\": entry.type === 'expense',\r\n                            \"text-green-500\": entry.type === 'income'\r\n                          })}>\r\n                            {entry.type === 'expense' ? '-' : '+'}{entry.amount}\r\n                          </div>\r\n                          <div className=\"w-2/12 text-right font-semibold\">\r\n                            {currentBalance}\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className={classNames(\"flex justify-end space-x-2 text-xs mt-2\", {\r\n                          hidden: selectedEntry !== `${month.format('MM-YYYY')}:${entry._id}`\r\n                        })}>\r\n                          <button\r\n                            onClick={() => {\r\n                              deleteEntry({\r\n                                variables: {\r\n                                  query: {_id: entry._id}\r\n                                }\r\n                              }).then(response => {\r\n                                console.log(response);\r\n                              });\r\n                            }}\r\n                            className=\"border-b border-red-500 text-red-500\"\r\n                          >\r\n                            <FontAwesomeIcon icon={[\"far\", \"trash-alt\"]}/> Delete\r\n                          </button>\r\n                          <button\r\n                            className=\"border-b border-indigo-500 text-indigo-500\"\r\n                          >\r\n                            <FontAwesomeIcon icon={[\"fas\", \"pencil-alt\"]} className=\"\"/> Edit\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n\r\n\r\n                    </React.Fragment>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst entriesByDate = (entries: Array<iEntry>, recurringEntries: Array<iEntry>, date: dayjs.Dayjs) => {\r\n  const filteredByDate = entries.filter((entry) => {\r\n    return dayjs(entry.date).startOf('month').isSame(date.startOf('month'));\r\n  });\r\n\r\n  const result = recurringEntries.map((entry) => {\r\n    const recurringDate = dayjs(entry.date).month(date.get('month')).year(date.get('year')).toISOString();\r\n    return {...entry, date: recurringDate}\r\n  });\r\n\r\n  return sortEntriesByDate(filteredByDate.concat(result));\r\n}\r\n\r\nconst sortEntriesByDate = (entries: Array<iEntry>) => {\r\n  return entries.sort((a, b) => {\r\n    if (a.date > b.date) return 1;\r\n    if (a.date < b.date) return -1;\r\n    return 0;\r\n  })\r\n}\r\n\r\nexport default withRouter(Home)\r\n","import React, {useContext} from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst RealmAppContext = React.createContext();\r\n\r\nexport const useRealmApp = () => {\r\n    const app = React.useContext(RealmAppContext);\r\n    if (!app) {\r\n        throw new Error(\r\n            `You must call useRealmApp() inside of a <RealmAppProvider />`\r\n        );\r\n    }\r\n    return app;\r\n};\r\n\r\nexport const RealmAppProvider = ({ appId, children }) => {\r\n    const [app, setApp] = React.useState(new Realm.App(appId));\r\n    React.useEffect(() => {\r\n        setApp(new Realm.App(appId));\r\n    }, [appId]);\r\n\r\n    // Wrap the Realm.App object's user state with React state\r\n    const [currentUser, setCurrentUser] = React.useState(app.currentUser);\r\n    async function logIn(credentials) {\r\n        await app.logIn(credentials);\r\n        // If successful, app.currentUser is the user that just logged in\r\n        setCurrentUser(app.currentUser);\r\n    }\r\n    async function logOut() {\r\n        // Log out the currently active user\r\n        await app.currentUser?.logOut();\r\n        // If another user was logged in too, they're now the current user.\r\n        // Otherwise, app.currentUser is null.\r\n        setCurrentUser(app.currentUser);\r\n    }\r\n\r\n    function forceLogout() {\r\n        if (currentUser) {\r\n            currentUser.accessToken = null;\r\n            currentUser.refreshToken = null;\r\n            setCurrentUser(null);\r\n        }\r\n    }\r\n\r\n    const wrapped = { ...app, currentUser, logIn, logOut, forceLogout };\r\n\r\n    return (\r\n        <RealmAppContext.Provider value={wrapped}>\r\n            {children}\r\n        </RealmAppContext.Provider>\r\n    );\r\n};\r\n","import React, {useContext} from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport {useRealmApp} from \"../RealmApp\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport default function LoginScreen() {\r\n    const app = useRealmApp();\r\n    // Toggle between logging users in and registering new users\r\n    const [mode, setMode] = React.useState(\"login\");\r\n    const toggleMode = () => {\r\n        setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\r\n    };\r\n    // Keep track of form input state\r\n    const [email, setEmail] = React.useState(\"\");\r\n    const [password, setPassword] = React.useState(\"\");\r\n    // Keep track of input validation/errors\r\n    const [error, setError] = React.useState({});\r\n    // Whenever the mode changes, clear the form inputs\r\n    React.useEffect(() => {\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n        setError({});\r\n    }, [mode]);\r\n\r\n    const [isLoggingIn, setIsLoggingIn] = React.useState(false);\r\n    const handleLogin = async () => {\r\n        setIsLoggingIn(true);\r\n        setError((e) => ({...e, password: null}));\r\n        try {\r\n            await app.logIn(Realm.Credentials.emailPassword(email, password));\r\n        } catch (err) {\r\n            handleAuthenticationError(err, setError);\r\n        }\r\n    };\r\n\r\n\r\n    if (app.currentUser) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n            <div className=\"max-w-md w-full\">\r\n                <div>\r\n                    <h2 className=\"mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900\">\r\n                        Sign in\r\n                    </h2>\r\n                </div>\r\n                <form className=\"mt-8\">\r\n                    <div className=\"rounded-md shadow-sm\">\r\n                        <div>\r\n                            <input aria-label=\"Email address\" name=\"email\" type=\"email\" required\r\n                                   className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5\"\r\n                                   placeholder=\"Email address\"\r\n                                   onChange={(e) => {\r\n                                       setError((e) => ({...e, email: null}));\r\n                                       setEmail(e.target.value);\r\n                                   }}\r\n                                   value={email}\r\n                            />\r\n                        </div>\r\n                        <div className=\"-mt-px\">\r\n                            <input aria-label=\"Password\" name=\"password\" type=\"password\" required\r\n                                   className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5\"\r\n                                   placeholder=\"Password\"\r\n                                   onChange={(e) => {\r\n                                       setPassword(e.target.value);\r\n                                   }}\r\n                                   value={password}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mt-6\">\r\n                        <button type=\"submit\"\r\n                                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    handleLogin()\r\n                                }}\r\n                        >\r\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\r\n                    <svg\r\n                        className=\"h-5 w-5 text-indigo-500 group-hover:text-indigo-400 transition ease-in-out duration-150\"\r\n                        fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                      <path fillRule=\"evenodd\"\r\n                            d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\"\r\n                            clipRule=\"evenodd\"/>\r\n                    </svg>\r\n                  </span>\r\n                            Sign in\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction handleAuthenticationError(err, setError) {\r\n    const {status, message} = parseAuthenticationError(err);\r\n    const errorType = message || status;\r\n    switch (errorType) {\r\n        case \"invalid username\":\r\n            setError((prevErr) => ({...prevErr, email: \"Invalid email address.\"}));\r\n            break;\r\n        case \"invalid username/password\":\r\n        case \"invalid password\":\r\n        case \"401\":\r\n            setError((err) => ({...err, password: \"Incorrect password.\"}));\r\n            break;\r\n        case \"name already in use\":\r\n        case \"409\":\r\n            setError((err) => ({...err, email: \"Email is already registered.\"}));\r\n            break;\r\n        case \"password must be between 6 and 128 characters\":\r\n        case \"400\":\r\n            setError((err) => ({\r\n                ...err,\r\n                password: \"Password must be between 6 and 128 characters.\",\r\n            }));\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction parseAuthenticationError(err) {\r\n    const parts = err.message.split(\":\");\r\n    const reason = parts[parts.length - 1].trimStart();\r\n    if (!reason) return {status: \"\", message: \"\"};\r\n    const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\r\n    const match = reason.match(reasonRegex);\r\n    const {status, message} = match?.groups ?? {};\r\n    return {status, message};\r\n}\r\n","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\nexport const ErrorStatusContext = React.createContext();\r\n\r\nconst ErrorHandler = ({children}) => {\r\n  const history = useHistory();\r\n  const [errorStatusCode, setErrorStatusCode] = React.useState();\r\n  const app = useRealmApp();\r\n\r\n  // Make sure to \"remove\" this status code whenever the user\r\n  // navigates to a new URL. If we didn't do that, then the user\r\n  // would be \"trapped\" into error pages forever\r\n  React.useEffect(() => {\r\n    // Listen for changes to the current location.\r\n    const unlisten = history.listen(() => setErrorStatusCode(undefined));\r\n\r\n    // cleanup the listener on unmount\r\n    return unlisten;\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (errorStatusCode === 401) {\r\n      // re-login is allowed only if current user is removed\r\n      app.forceLogout();\r\n    }\r\n  }, [errorStatusCode])\r\n\r\n  const renderContent = () => {\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <ErrorStatusContext.Provider value={{setErrorStatusCode}}>\r\n      {renderContent()}\r\n    </ErrorStatusContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ErrorHandler;","import React, {useContext} from \"react\";\nimport { useRealmApp } from \"../RealmApp\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport { ErrorStatusContext } from \"../components/ErrorHandler\";\n\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app, setErrorStatusCode) => {\n  const link = new HttpLink({\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData().catch((error) => {\n        setErrorStatusCode(401);\n      });\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n  });\n\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({ link, cache });\n};\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const { setErrorStatusCode } = useContext(ErrorStatusContext);\n\n  const [client, setClient] = React.useState(createRealmApolloClient(app, setErrorStatusCode));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app, setErrorStatusCode));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n","import React from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n  const app = useRealmApp();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        app.currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute","import React, {useState} from 'react'\r\nimport {withRouter} from \"react-router\"\r\nimport {ADD_ENTRY} from \"../graphql/entryMutations\";\r\nimport {useMutation} from '@apollo/client';\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst AddEntry = (props: Props) => {\r\n  const app = useRealmApp();\r\n  const [addEntry, {data}] = useMutation(ADD_ENTRY);\r\n  const [entryData, setEntryData] = useState({\r\n    title: '',\r\n    amount: 0,\r\n    type: 'expense',\r\n    date: new Date(),\r\n    is_recurring: false,\r\n    user: {\r\n      link: app.currentUser._id\r\n    }\r\n  });\r\n\r\n  const handleSubmit = () => {\r\n    addEntry({\r\n      variables: {\r\n        data: entryData\r\n      }\r\n    }).then(response => {\r\n      console.log(response);\r\n    });\r\n   };\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement|HTMLSelectElement>) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value: any;\r\n\r\n    if (target instanceof HTMLInputElement && target.type === 'checkbox') {\r\n      value = target.checked;\r\n    } else if (target.type === 'date') {\r\n      value = new Date(target.value);\r\n    } else {\r\n      value = target.value;\r\n    }\r\n\r\n    setEntryData({...entryData, [name]: value})\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full\">\r\n        <div>\r\n          <h2 className=\"mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900\">\r\n            Add entry\r\n          </h2>\r\n        </div>\r\n        <form className=\"mt-8\">\r\n          <div className=\"grid grid-cols-2 gap-3\">\r\n            <div className=\"col-span-2\">\r\n              <input\r\n                name=\"title\"\r\n                value={entryData.title}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Title\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-2\">\r\n              <input\r\n                name=\"date\"\r\n                value={entryData.date.toISOString().split('T')[0]}\r\n                onChange={handleInputChange}\r\n                type=\"date\"\r\n                placeholder=\"Date\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-1\">\r\n              <input\r\n                name=\"amount\"\r\n                value={entryData.amount}\r\n                onChange={handleInputChange}\r\n                type=\"number\"\r\n                min=\"0\"\r\n                placeholder=\"Amount\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-1\">\r\n              <select\r\n                name=\"type\"\r\n                value={entryData.type}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Type\"\r\n                className=\"mt-1 block form-select w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\">\r\n                <option value=\"expense\">Expense</option>\r\n                <option value=\"income\">Income</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"col-span-2 flex items-start\">\r\n              <div className=\"items-center h-5\">\r\n                <input\r\n                  onChange={handleInputChange}\r\n                  checked={entryData.is_recurring}\r\n                  id=\"is_recurring\"\r\n                  name=\"is_recurring\"\r\n                  type=\"checkbox\"\r\n                  className=\"form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out\"/>\r\n              </div>\r\n              <div className=\"ml-3 text-sm leading-5\">\r\n                <label htmlFor=\"is_recurring\" className=\"font-medium text-gray-700\">Is recurring</label>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"mt-6\">\r\n            <button\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit()\r\n              }}\r\n              type=\"submit\"\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(AddEntry)\r\n","import React from 'react'\r\nimport {HashRouter as Router, Route} from \"react-router-dom\"\r\nimport Home from './components/Home'\r\nimport LoginScreen from './components/LoginScreen'\r\nimport RealmApolloProvider from \"./graphql/RealmApolloProvider\";\r\nimport {RealmAppProvider} from \"./RealmApp\";\r\nimport './App.css';\r\nimport ErrorHandler from \"./components/ErrorHandler\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport AddEntry from \"./components/AddEntry\";\r\n\r\nexport const APP_ID = \"expenses-planner-react-tcjrv\";\r\n\r\nfunction App() {\r\n  return (\r\n    <RealmAppProvider appId={APP_ID}>\r\n      <Router>\r\n        <ErrorHandler>\r\n          <RealmApolloProvider>\r\n            <div className=\"App\">\r\n              <PrivateRoute exact path=\"/\" component={Home}/>\r\n              <PrivateRoute exact path=\"/entries/add\" component={AddEntry}/>\r\n              <Route exact path=\"/login\" component={LoginScreen}/>\r\n            </div>\r\n          </RealmApolloProvider>\r\n        </ErrorHandler>\r\n      </Router>\r\n    </RealmAppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}