{"version":3,"sources":["graphql/useEntries.js","RealmApp.js","components/ErrorHandler.js","components/Home.tsx","components/LoginScreen.js","graphql/RealmApolloProvider.js","components/PrivateRoute.js","components/AddEntry.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useEntries","gql","RealmAppContext","React","createContext","useRealmApp","app","useContext","Error","RealmAppProvider","appId","children","useState","Realm","setApp","useEffect","currentUser","setCurrentUser","credentials","a","logIn","logOut","wrapped","forceLogout","accessToken","refreshToken","Provider","value","ErrorStatusContext","ErrorHandler","history","useHistory","errorStatusCode","setErrorStatusCode","listen","undefined","withRouter","props","useLazyQuery","onCompleted","result","console","log","onError","error","fetch","loading","data","LoginScreen","mode","email","setEmail","password","setPassword","setError","setIsLoggingIn","handleLogin","e","emailPassword","handleAuthenticationError","to","className","aria-label","name","type","required","placeholder","onChange","target","onClick","preventDefault","fill","viewBox","fillRule","d","clipRule","err","parts","message","split","reason","length","trimStart","status","reasonRegex","match","groups","parseAuthenticationError","prevErr","createRealmApolloClient","link","HttpLink","uri","id","options","refreshCustomData","catch","headers","Authorization","cache","InMemoryCache","ApolloClient","RealmApolloProvider","client","setClient","PrivateRoute","Component","component","rest","render","pathname","state","from","location","min","defaultValue","htmlFor","App","exact","path","Home","AddEntry","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f45f1330.chunk.js","sourcesContent":["import {gql} from '@apollo/client';\r\n\r\nconst useEntries = () => {\r\n  return gql`\r\n    query GetAllEntries {\r\n      entries {\r\n        _id\r\n        title\r\n        type\r\n        amount\r\n        is_recurring\r\n        date\r\n      }\r\n    }\r\n  `;\r\n};\r\nexport default useEntries;","import React, {useContext} from \"react\";\r\nimport * as Realm from \"realm-web\";\r\n\r\nconst RealmAppContext = React.createContext();\r\n\r\nexport const useRealmApp = () => {\r\n    const app = React.useContext(RealmAppContext);\r\n    if (!app) {\r\n        throw new Error(\r\n            `You must call useRealmApp() inside of a <RealmAppProvider />`\r\n        );\r\n    }\r\n    return app;\r\n};\r\n\r\nexport const RealmAppProvider = ({ appId, children }) => {\r\n    const [app, setApp] = React.useState(new Realm.App(appId));\r\n    React.useEffect(() => {\r\n        setApp(new Realm.App(appId));\r\n    }, [appId]);\r\n\r\n    // Wrap the Realm.App object's user state with React state\r\n    const [currentUser, setCurrentUser] = React.useState(app.currentUser);\r\n    async function logIn(credentials) {\r\n        await app.logIn(credentials);\r\n        // If successful, app.currentUser is the user that just logged in\r\n        setCurrentUser(app.currentUser);\r\n    }\r\n    async function logOut() {\r\n        // Log out the currently active user\r\n        await app.currentUser?.logOut();\r\n        // If another user was logged in too, they're now the current user.\r\n        // Otherwise, app.currentUser is null.\r\n        setCurrentUser(app.currentUser);\r\n    }\r\n\r\n    function forceLogout() {\r\n        if (currentUser) {\r\n            currentUser.accessToken = null;\r\n            currentUser.refreshToken = null;\r\n            setCurrentUser(null);\r\n        }\r\n    }\r\n\r\n    const wrapped = { ...app, currentUser, logIn, logOut, forceLogout };\r\n\r\n    return (\r\n        <RealmAppContext.Provider value={wrapped}>\r\n            {children}\r\n        </RealmAppContext.Provider>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\nexport const ErrorStatusContext = React.createContext();\r\n\r\nconst ErrorHandler = ({children}) => {\r\n  const history = useHistory();\r\n  const [errorStatusCode, setErrorStatusCode] = React.useState();\r\n  const app = useRealmApp();\r\n\r\n  // Make sure to \"remove\" this status code whenever the user\r\n  // navigates to a new URL. If we didn't do that, then the user\r\n  // would be \"trapped\" into error pages forever\r\n  React.useEffect(() => {\r\n    // Listen for changes to the current location.\r\n    const unlisten = history.listen(() => setErrorStatusCode(undefined));\r\n\r\n    // cleanup the listener on unmount\r\n    return unlisten;\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    if (errorStatusCode === 401) {\r\n      // re-login is allowed only if current user is removed\r\n      app.forceLogout();\r\n    }\r\n  }, [errorStatusCode])\r\n\r\n  const renderContent = () => {\r\n    return children;\r\n  }\r\n\r\n  return (\r\n    <ErrorStatusContext.Provider value={{setErrorStatusCode}}>\r\n      {renderContent()}\r\n    </ErrorStatusContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ErrorHandler;","import React, {useContext, useEffect} from 'react'\r\n// import Entry from './Entry'\r\n// import EntryForm from './EntryForm'\r\nimport { withRouter } from \"react-router\"\r\nimport useEntries from \"../graphql/useEntries\";\r\nimport { useLazyQuery, gql } from '@apollo/client';\r\nimport { ErrorStatusContext } from \"./ErrorHandler\";\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\n// interface iEntry {\r\n//   _id: string,\r\n//   date: Date,\r\n//   title: String,\r\n//   amount: number\r\n// }\r\n\r\nconst Home = (props: Props) => {\r\n  const { setErrorStatusCode } = useContext(ErrorStatusContext)\r\n  const [fetch, {loading, error, data }] = useLazyQuery(useEntries(), {\r\n    onCompleted: (result) => {\r\n      console.log('completed with data:', result);\r\n    },\r\n    onError: (error) => {\r\n      console.log(error);\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch();\r\n  }, []);\r\n\r\n  // const initialEntries: Array<iEntry> = [\r\n  //   {\r\n  //     date: new Date(\"2020-02-16\"),\r\n  //     title: \"Entry 1\",\r\n  //     value: -111\r\n  //   },\r\n  //   {\r\n  //     date: new Date(\"2020-03-20\"),\r\n  //     title: \"Entry 2\",\r\n  //     value: -111\r\n  //   }\r\n  // ]\r\n  // const initial: number = 2000\r\n  // const [balance, setBalance] = useState(initial)\r\n  // // const [entries, setEntries] = useState(initialEntries)\r\n  //\r\n  // let newBalance = balance\r\n  //\r\n  // let currentMonth = new Date(\"2000-01-01\")\r\n  //\r\n  // const formatter = new Intl.DateTimeFormat('en', { month: 'long' })\r\n  //\r\n  // const sortedEntries = entries.sort((a, b) => {\r\n  //   if (a.date > b.date) return 1;\r\n  //   if (a.date < b.date) return -1;\r\n  //   return 0;\r\n  // })\r\n  //\r\n  // console.log('sortedEntries', sortedEntries)\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n        {/*{entries.map((entry: iEntry) =>*/}\r\n        {/*    <Entry key={entry._id} title={entry.title} amount={entry.amount} balance={6666} />*/}\r\n        {/*)}*/}\r\n      {/*<EntryForm*/}\r\n      {/*    handleSubmit={(title, value) => {*/}\r\n      {/*      const randomMonth = Math.floor(Math.random() * Math.floor(11)) + 1*/}\r\n      {/*      console.log('randomMonth', randomMonth)*/}\r\n      {/*      setEntries([...entries, {*/}\r\n      {/*        date: new Date(`2020-${randomMonth}-20`),*/}\r\n      {/*        title: title,*/}\r\n      {/*        value: value*/}\r\n      {/*      }])*/}\r\n      {/*    }}*/}\r\n      {/*  />*/}\r\n      {/*  <textarea readOnly={true} value={JSON.stringify(entries)}></textarea>*/}\r\n      {/*  <div className=\"container py-2 mt-4 mb-4\">*/}\r\n      {/*    {entries.sort((a, b) => {*/}\r\n      {/*      if (a.date > b.date) return 1;*/}\r\n      {/*      if (a.date < b.date) return -1;*/}\r\n      {/*      return 0;*/}\r\n      {/*    }).map((entry, index) => {*/}\r\n      {/*      newBalance += entry.value*/}\r\n      {/*      const nextMonth = isNextMonth(currentMonth, entry.date)*/}\r\n      {/*      currentMonth = nextMonth ? nextMonth : currentMonth*/}\r\n\r\n      {/*      return (*/}\r\n      {/*        <React.Fragment key={index}>*/}\r\n      {/*          {nextMonth &&*/}\r\n      {/*            <MonthGroup title={formatter.format(nextMonth)}></MonthGroup>*/}\r\n      {/*          }*/}\r\n\r\n      {/*          <Entry {...entry} balance={newBalance}></Entry>*/}\r\n      {/*        </React.Fragment>*/}\r\n      {/*      )*/}\r\n      {/*    })}*/}\r\n      {/*  </div>*/}\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface iProps {\r\n  title: String\r\n}\r\n\r\n// const MonthGroup = ({ title }: iProps) => {\r\n//   return (\r\n//     <div className=\"row\">\r\n//\r\n//       <div className=\"col-2 d-flex py-2\">\r\n//         <div className=\"float-right text-muted\">{title}</div>\r\n//       </div>\r\n//\r\n//\r\n//       <div className=\"col-auto text-center flex-column d-none d-sm-flex\">\r\n//\r\n//         <div className=\"row h-100\">\r\n//           <div className=\"col border-right\">&nbsp;</div>\r\n//           <div className=\"col\">&nbsp;</div>\r\n//         </div>\r\n//       </div>\r\n//\r\n//       <div className=\"col-7 pb-2 pt-2\">\r\n//\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n//\r\n// const isNextMonth = (currentMonth: Date, newDate: Date) => {\r\n//   if (currentMonth.getMonth() === newDate.getMonth() && currentMonth.getFullYear() === newDate.getFullYear()) {\r\n//     return false;\r\n//   }\r\n//   return new Date(newDate.getFullYear(), newDate.getMonth(), 1);\r\n// }\r\n\r\nexport default withRouter(Home)\r\n","import React, {useContext} from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport {useRealmApp} from \"../RealmApp\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nexport default function LoginScreen() {\r\n    const app = useRealmApp();\r\n    // Toggle between logging users in and registering new users\r\n    const [mode, setMode] = React.useState(\"login\");\r\n    const toggleMode = () => {\r\n        setMode((oldMode) => (oldMode === \"login\" ? \"register\" : \"login\"));\r\n    };\r\n    // Keep track of form input state\r\n    const [email, setEmail] = React.useState(\"\");\r\n    const [password, setPassword] = React.useState(\"\");\r\n    // Keep track of input validation/errors\r\n    const [error, setError] = React.useState({});\r\n    // Whenever the mode changes, clear the form inputs\r\n    React.useEffect(() => {\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n        setError({});\r\n    }, [mode]);\r\n\r\n    const [isLoggingIn, setIsLoggingIn] = React.useState(false);\r\n    const handleLogin = async () => {\r\n        setIsLoggingIn(true);\r\n        setError((e) => ({...e, password: null}));\r\n        try {\r\n            await app.logIn(Realm.Credentials.emailPassword(email, password));\r\n        } catch (err) {\r\n            handleAuthenticationError(err, setError);\r\n        }\r\n    };\r\n\r\n\r\n    if (app.currentUser) {\r\n        return <Redirect to=\"/\"/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n            <div className=\"max-w-md w-full\">\r\n                <div>\r\n                    <h2 className=\"mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900\">\r\n                        Sign in\r\n                    </h2>\r\n                </div>\r\n                <form className=\"mt-8\">\r\n                    <div className=\"rounded-md shadow-sm\">\r\n                        <div>\r\n                            <input aria-label=\"Email address\" name=\"email\" type=\"email\" required\r\n                                   className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5\"\r\n                                   placeholder=\"Email address\"\r\n                                   onChange={(e) => {\r\n                                       setError((e) => ({...e, email: null}));\r\n                                       setEmail(e.target.value);\r\n                                   }}\r\n                                   value={email}\r\n                            />\r\n                        </div>\r\n                        <div className=\"-mt-px\">\r\n                            <input aria-label=\"Password\" name=\"password\" type=\"password\" required\r\n                                   className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:shadow-outline-blue focus:border-blue-300 focus:z-10 sm:text-sm sm:leading-5\"\r\n                                   placeholder=\"Password\"\r\n                                   onChange={(e) => {\r\n                                       setPassword(e.target.value);\r\n                                   }}\r\n                                   value={password}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mt-6\">\r\n                        <button type=\"submit\"\r\n                                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n                                onClick={(e) => {\r\n                                    e.preventDefault();\r\n                                    handleLogin()\r\n                                }}\r\n                        >\r\n                  <span className=\"absolute left-0 inset-y-0 flex items-center pl-3\">\r\n                    <svg\r\n                        className=\"h-5 w-5 text-indigo-500 group-hover:text-indigo-400 transition ease-in-out duration-150\"\r\n                        fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                      <path fillRule=\"evenodd\"\r\n                            d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\"\r\n                            clipRule=\"evenodd\"/>\r\n                    </svg>\r\n                  </span>\r\n                            Sign in\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction handleAuthenticationError(err, setError) {\r\n    const {status, message} = parseAuthenticationError(err);\r\n    const errorType = message || status;\r\n    switch (errorType) {\r\n        case \"invalid username\":\r\n            setError((prevErr) => ({...prevErr, email: \"Invalid email address.\"}));\r\n            break;\r\n        case \"invalid username/password\":\r\n        case \"invalid password\":\r\n        case \"401\":\r\n            setError((err) => ({...err, password: \"Incorrect password.\"}));\r\n            break;\r\n        case \"name already in use\":\r\n        case \"409\":\r\n            setError((err) => ({...err, email: \"Email is already registered.\"}));\r\n            break;\r\n        case \"password must be between 6 and 128 characters\":\r\n        case \"400\":\r\n            setError((err) => ({\r\n                ...err,\r\n                password: \"Password must be between 6 and 128 characters.\",\r\n            }));\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nfunction parseAuthenticationError(err) {\r\n    const parts = err.message.split(\":\");\r\n    const reason = parts[parts.length - 1].trimStart();\r\n    if (!reason) return {status: \"\", message: \"\"};\r\n    const reasonRegex = /(?<message>.+)\\s\\(status (?<status>[0-9][0-9][0-9])/;\r\n    const match = reason.match(reasonRegex);\r\n    const {status, message} = match?.groups ?? {};\r\n    return {status, message};\r\n}\r\n","import React, {useContext} from \"react\";\nimport { useRealmApp } from \"../RealmApp\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport { ErrorStatusContext } from \"../components/ErrorHandler\";\n\n\n// Create an ApolloClient that connects to the provided Realm.App's GraphQL API\nconst createRealmApolloClient = (app, setErrorStatusCode) => {\n  const link = new HttpLink({\n    uri: `https://realm.mongodb.com/api/client/v2.0/app/${app.id}/graphql`,\n    // A custom fetch handler adds the logged in user's access token to GraphQL requests\n    fetch: async (uri, options) => {\n      if (!app.currentUser) {\n        throw new Error(`Must be logged in to use the GraphQL API`);\n      }\n      // Refreshing a user's custom data also refreshes their access token\n      await app.currentUser.refreshCustomData().catch((error) => {\n        setErrorStatusCode(401);\n      });\n      // The handler adds a bearer token Authorization header to the otherwise unchanged request\n      options.headers.Authorization = `Bearer ${app.currentUser.accessToken}`;\n      return fetch(uri, options);\n    },\n  });\n\n  const cache = new InMemoryCache();\n\n  return new ApolloClient({ link, cache });\n};\n\nexport default function RealmApolloProvider({ children }) {\n  const app = useRealmApp();\n  const { setErrorStatusCode } = useContext(ErrorStatusContext);\n\n  const [client, setClient] = React.useState(createRealmApolloClient(app, setErrorStatusCode));\n  React.useEffect(() => {\n    setClient(createRealmApolloClient(app, setErrorStatusCode));\n  }, [app]);\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n}\n","import React from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport {useRealmApp} from \"../RealmApp\";\r\n\r\nconst PrivateRoute = ({component: Component, ...rest}) => {\r\n  const app = useRealmApp();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        app.currentUser ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute","import React from 'react'\r\nimport {withRouter} from \"react-router\"\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst AddEntry = (props: Props) => {\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\r\n      <div className=\"max-w-md w-full\">\r\n        <div>\r\n          <h2 className=\"mt-6 text-center text-3xl leading-9 font-extrabold text-gray-900\">\r\n            Add entry\r\n          </h2>\r\n        </div>\r\n        <form className=\"mt-8\">\r\n          <div className=\"grid grid-cols-2 gap-3\">\r\n            <div className=\"col-span-2\">\r\n              <input\r\n                placeholder=\"Title\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-2\">\r\n              <input\r\n                name=\"date\"\r\n                type=\"date\"\r\n                placeholder=\"Date\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-1\">\r\n              <input\r\n                name=\"amount\"\r\n                type=\"number\"\r\n                min=\"0\"\r\n                placeholder=\"Amount\"\r\n                className=\"mt-1 form-input block w-full py-2 px-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\"\r\n              />\r\n            </div>\r\n            <div className=\"col-span-1\">\r\n              <select\r\n                name=\"type\"\r\n                placeholder=\"Type\"\r\n                defaultValue=\"expense\"\r\n                className=\"mt-1 block form-select w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:shadow-outline-blue focus:border-blue-300 transition duration-150 ease-in-out sm:text-sm sm:leading-5\">\r\n                <option value=\"expense\">Expense</option>\r\n                <option value=\"income\">Income</option>\r\n              </select>\r\n            </div>\r\n\r\n            <div className=\"col-span-2 flex items-start\">\r\n              <div className=\"items-center h-5\">\r\n                <input\r\n                  id=\"is_recurring\"\r\n                  name=\"is_recurring\"\r\n                  type=\"checkbox\"\r\n                  className=\"form-checkbox h-4 w-4 text-indigo-600 transition duration-150 ease-in-out\" />\r\n              </div>\r\n              <div className=\"ml-3 text-sm leading-5\">\r\n                <label htmlFor=\"is_recurring\" className=\"font-medium text-gray-700\">Is recurring</label>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n\r\n\r\n          <div className=\"mt-6\">\r\n            <button\r\n              type=\"submit\"\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:border-indigo-700 focus:shadow-outline-indigo active:bg-indigo-700 transition duration-150 ease-in-out\"\r\n            >\r\n              Add\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default withRouter(AddEntry)\r\n","import React from 'react'\r\nimport {HashRouter as Router, Route} from \"react-router-dom\"\r\nimport Home from './components/Home'\r\nimport LoginScreen from './components/LoginScreen'\r\nimport RealmApolloProvider from \"./graphql/RealmApolloProvider\";\r\nimport {RealmAppProvider} from \"./RealmApp\";\r\nimport './App.css';\r\nimport ErrorHandler from \"./components/ErrorHandler\";\r\nimport PrivateRoute from \"./components/PrivateRoute\";\r\nimport AddEntry from \"./components/AddEntry\";\r\n\r\nexport const APP_ID = \"expenses-planner-react-tcjrv\";\r\n\r\nfunction App() {\r\n  return (\r\n    <RealmAppProvider appId={APP_ID}>\r\n      <Router>\r\n        <ErrorHandler>\r\n          <RealmApolloProvider>\r\n            <div className=\"App\">\r\n              <PrivateRoute exact path=\"/\" component={Home}/>\r\n              <PrivateRoute exact path=\"/entries/add\" component={AddEntry}/>\r\n              <Route exact path=\"/login\" component={LoginScreen}/>\r\n            </div>\r\n          </RealmApolloProvider>\r\n        </ErrorHandler>\r\n      </Router>\r\n    </RealmAppProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}